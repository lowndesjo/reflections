

—> 3 steps:
1. Working directory i.e. when you create a file and work in it
2. Staging area i.e. the waiting area for files before they get committed - add a file to this using ‘git add _filename_’
3. Repository i.e. the place where your git commits go - add files to this using ‘git commit’. Add a message according to the following style guide: http://udacity.github.io/git-styleguide/ 

Check the whereabouts of files using ‘git status’

To compare working directory and staging area use ‘git diff’ (without arguments)

To compare staging area to repository use ‘git diff —staged’


***


—> BRANCHES
Branches are useful if you want to keep a master copy, but also create a new version, which may be in a different language, may be experimenting with new features or may be an alternate, perhaps easier version of a game.

Check what branches exist: ‘git branch’

Create branch: ‘git branch _branchname_’

Change the branch you are working in ‘git checkout _branch you want_’

Get a visual representation of branches: ‘git log --graph --oneline _branch1_ _branch2_’

Create a new branch to commit changes to whilst working in detached head state: ‘git checkout -b _newbranchname_’

Merge two branches: Checkout the branch you want to merge commit to be logged in > ‘git merge _branch2_’ (you don’t need to mention the branch you are checked out in if that’s the one you want to merge into. You can merge 2 branches into it though in which case you would add both as arguments. In short: The key is to remember that git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branchq

Delete a branch label (once changes have been merged): ‘git branch -d _branchname_’

Because merged commits are shown in timestamp order they won’t necessarily appear next to their parent which could make git diff confusing. 
To compare against its parent: ‘git show commit_id’

***

If you want to just show the most recent commit: git log -n 1 (you can change 1 to the number of most recent commits you want to see)